{"version":3,"sources":["../src/Agent.js"],"names":[],"mappings":"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","file":"Agent.js","sourcesContent":["/*\n ******************************************************************************\n Copyright (c) 2016 Particle Industries, Inc.  All rights reserved.\n\n This program is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation, either\n version 3 of the License, or (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public\n License along with this program; if not, see <http://www.gnu.org/licenses/>.\n ******************************************************************************\n */\n\nimport request from 'superagent';\nimport prefix from 'superagent-prefix';\nimport path from 'path';\n\n\nexport default class Agent {\n\n\tconstructor(baseUrl) {\n\t\tthis.prefix = prefix(baseUrl);\n\t}\n\n\tget(uri, auth, query) {\n\t\treturn this.request({uri, auth, method: 'get', query: query});\n\t}\n\n\thead(uri, auth) {\n\t\treturn this.request({uri, auth, method: 'head'});\n\t}\n\n\tpost(uri, data, auth) {\n\t\treturn this.request({uri, data, auth, method: 'post'});\n\t}\n\n\tput(uri, data, auth) {\n\t\treturn this.request({uri, data, auth, method: 'put'});\n\t}\n\n\tdelete(uri, data, auth) {\n\t\treturn this.request({uri, data, auth, method: 'delete'});\n\t}\n\n\n\t/**\n\t *\n\t * @param {String} uri           The URI to request\n\t * @param {String} method        The method used to request the URI, should be in uppercase.\n\t * @param {String} data          Arbitrary data to send as the body.\n\t * @param {Object} auth          Authorization\n\t * @param {String} query         Query parameters\n\t * @param {Object} form          Form fields\n\t * @param {Object} files         array of file names and file content\n\t * @return {Promise} A promise. fulfilled with {body, statusCode}, rejected with { statusCode, errorDescription, error, body }\n\t */\n\trequest({uri, method, data = undefined, auth, query = undefined, form = undefined, files = undefined}) {\n\t\tconst requestFiles = this._sanitizeFiles(files);\n\t\treturn this._request({uri, method, data, auth, query, form, files: requestFiles});\n\t}\n\n\t/**\n\t *\n\t * @param {String} uri           The URI to request\n\t * @param {String} method        The method used to request the URI, should be in uppercase.\n\t * @param {String} data          Arbitrary data to send as the body.\n\t * @param {Object} auth          Authorization\n\t * @param {String} query         Query parameters\n\t * @param {Object} form          Form fields\n\t * @param {Object} files         array of file names and file content\n\t * @return {Promise} A promise. fulfilled with {body, statusCode}, rejected with { statusCode, errorDescription, error, body }\n\t */\n\t_request({uri, method, data, auth, query, form, files}) {\n\t\tconst req = this._buildRequest({uri, method, data, auth, query, form, files});\n\t\treturn this._promiseResponse(req);\n\t}\n\n\t/**\n\t * Promises to send the request and retreive the response.\n\t * @param {Request} req The request to send\n\t * @returns {Promise}   The promise to send the request and retrieve the response.\n\t * @private\n\t */\n\t_promiseResponse(req) {\n\t\treturn new Promise((fulfill, reject) => this._sendRequest(req, fulfill, reject));\n\t}\n\n\t/**\n\t * Sends the given request, calling the fulfill or reject methods for success/failure.\n\t * @param {object} request   The request to send\n\t * @param {function} fulfill    Called on success with the response\n\t * @param {function} reject     Called on failure with the failure reason.\n\t * @private\n\t * @returns {undefined} Nothing\n\t */\n\t_sendRequest(request, fulfill, reject) {\n\t\trequest.end((error, res) => {\n\t\t\tconst body = res && res.body;\n\t\t\tif (error) {\n\t\t\t\tconst uri = request.url;\n\t\t\t\tconst statusCode = error.status;\n\t\t\t\tlet errorDescription = `${statusCode ? 'HTTP error ' + statusCode : 'Network error'} from ${uri}`;\n\t\t\t\tif (body && body.error_description) {\n\t\t\t\t\terrorDescription += ' - ' + body.error_description;\n\t\t\t\t}\n\t\t\t\tconst reason = new Error(errorDescription);\n\t\t\t\tObject.assign(reason, {statusCode, errorDescription, error, body});\n\t\t\t\treject(reason);\n\t\t\t} else {\n\t\t\t\tfulfill({\n\t\t\t\t\tbody: body,\n\t\t\t\t\tstatusCode: res.statusCode\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t_buildRequest({uri, method, data, auth, query, form, files, makerequest=request}) {\n\t\tconst req = makerequest(method, uri);\n\t\tif (this.prefix) {\n\t\t\treq.use(this.prefix);\n\t\t}\n\t\tthis._authorizationHeader(req, auth);\n\t\tif (query) {\n\t\t\treq.query(query);\n\t\t}\n\t\tif (files) {\n\t\t\tfor (let [name, file] of Object.entries(files)) {\n\t\t\t\treq._getFormData().append(name, file.data, {\n\t\t\t\t\tfilename: file.path,\n\t\t\t\t\trelativePath: path.dirname(file.path)\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (form) {\n\t\t\t\tfor (let [name, value] of Object.entries(form)) {\n\t\t\t\t\treq.field(name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (form) {\n\t\t\treq.type('form');\n\t\t\treq.send(form);\n\t\t} else if (data) {\n\t\t\treq.send(data);\n\t\t}\n\t\treturn req;\n\t}\n\n\t/**\n\t * Adds an authorization header.\n\t * @param {Request} req     The request to add the authorization header to.\n\t * @param {object|string}  auth    The authorization. Either a string authorization bearer token,\n\t *  or a username/password object.\n\t * @returns {Request} req   The original request.\n\t */\n\t_authorizationHeader(req, auth) {\n\t\tif (auth) {\n\t\t\tif (auth.username !== undefined) {\n\t\t\t\treq.auth(auth.username, auth.password);\n\t\t\t} else {\n\t\t\t\treq.set({Authorization: `Bearer ${auth}`});\n\t\t\t}\n\t\t}\n\t\treturn req;\n\t}\n\n\t/**\n\t *\n\t * @param {Array} files converts the file names to file, file1, file2.\n\t * @returns {object} the renamed files.\n\t */\n\t_sanitizeFiles(files) {\n\t\tlet requestFiles;\n\t\tif (files) {\n\t\t\trequestFiles = {};\n\t\t\tObject.keys(files).forEach((k, i) => {\n\t\t\t\tconst name = i ? `file${i + 1}` : 'file';\n\t\t\t\trequestFiles[name] = {\n\t\t\t\t\tdata: files[k],\n\t\t\t\t\tpath: k\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t\treturn requestFiles;\n\t}\n}\n\n"]}