'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () {
	function defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
			var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
		}
	}return function (Constructor, protoProps, staticProps) {
		if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	};
}();

var _Particle = require('./Particle');

var _Particle2 = _interopRequireDefault(_Particle);

var _Library = require('./Library');

var _Library2 = _interopRequireDefault(_Library);

function _interopRequireDefault(obj) {
	return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

var Client = function () {
	function Client(_ref) {
		var auth = _ref.auth;
		var _ref$api = _ref.api;
		var api = _ref$api === undefined ? new _Particle2.default() : _ref$api;

		_classCallCheck(this, Client);

		Object.assign(this, { auth: auth, api: api });
	}

	/**
  * Get firmware library objects
  * @param  {Object} query The query parameters for libraries. See Particle.listLibraries
  * @return {Promise}
  */

	_createClass(Client, [{
		key: 'libraries',
		value: function libraries() {
			var _this = this;

			var query = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

			return this.api.listLibraries(Object.assign({}, query, { auth: this.auth })).then(function (payload) {
				var libraries = payload.body.data || [];
				return libraries.map(function (l) {
					return new _Library2.default(_this, l);
				});
			});
		}

		/**
   * Get one firmware library object
   * @param  {String} name Name of the library to fetch
   * @param  {Object} query The query parameters for libraries. See Particle.getLibrary
   * @return {Promise}
   */

	}, {
		key: 'library',
		value: function library(name) {
			var _this2 = this;

			var query = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			return this.api.getLibrary(Object.assign({}, query, { name: name, auth: this.auth })).then(function (payload) {
				var library = payload.body.data || {};
				return new _Library2.default(_this2, library);
			});
		}
	}, {
		key: 'downloadFile',
		value: function downloadFile(url) {
			return this.api.downloadFile();
		}
	}]);

	return Client;
}();

exports.default = Client;
module.exports = exports['default'];
//# sourceMappingURL=Client.js.map

//# sourceMappingURL=Client-compiled.js.map